@using System.Text.Json
@using BusinessObjects
@{
    ViewBag.Title = "Settings";

    // Get display name from session (used in header)
    var userJson = Context.Session.GetString("User");
    string? displayName = null;
    if (!string.IsNullOrEmpty(userJson))
    {
        try
        {
            using var doc = JsonDocument.Parse(userJson);
            if (doc.RootElement.TryGetProperty("FullName", out var fn) && fn.ValueKind == JsonValueKind.String && !string.IsNullOrWhiteSpace(fn.GetString()))
                displayName = fn.GetString();
            else if (doc.RootElement.TryGetProperty("Username", out var un))
                displayName = un.GetString();
        }
        catch { displayName = null; }
    }

    // User object provided by controller (full profile). Fallback to minimal info from session.
    BusinessObjects.User? user = null;
    if (ViewBag.User is BusinessObjects.User u) user = u;
    else if (!string.IsNullOrEmpty(userJson))
    {
        try
        {
            // session stored minimal info earlier: { UserId, Username, FullName }
            using var doc = JsonDocument.Parse(userJson);
            user = new BusinessObjects.User
            {
                Username = doc.RootElement.TryGetProperty("Username", out var un2) ? un2.GetString() ?? string.Empty : string.Empty,
                FullName = doc.RootElement.TryGetProperty("FullName", out var fn2) ? fn2.GetString() ?? string.Empty : string.Empty
            };
        }
        catch { user = null; }
    }

    string avatarUrl = user?.AvatarUrl ?? "/images/default-avatar.png";
    var usernameDisplay = user?.Username ?? displayName ?? "User";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewBag.Title - ChatApp</title>
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;600;700;800&display=swap" rel="stylesheet" />
    <link href="~/css/setting.css" rel="stylesheet" />
</head>
<body>
    <header class="main-header">
        <div class="header-container">
            <a href="~/" class="logo">ChatApp</a>
            <nav class="main-nav">
                <div class="nav-group">
                    <a href="/User/friend">Friends</a>
                    <a href="/User/setting" class="active">Settings</a>
                    <a href="/User/block">Block</a>
                </div>

                @if (!string.IsNullOrEmpty(usernameDisplay))
                {
                    <div class="user-actions">
                        <span class="user-greeting">@usernameDisplay</span>
                        <form method="post" asp-controller="User" asp-action="Logout" class="logout-form">
                            <button type="submit" class="btn-logout">Log out</button>
                        </form>
                    </div>
                }
                else
                {
                    <a href="@Url.Action("login", "User")">Sign In</a>
                }
            </nav>
        </div>
    </header>

    <main class="container">
        <div class="settings-container">
            <div class="settings-card">
                <h2 class="settings-title">Account Settings</h2>

                @if (ViewBag.Message != null)
                {
                    <div class="alert alert-success">@ViewBag.Message</div>
                }
                @if (ViewBag.Error != null)
                {
                    <div class="alert alert-danger">@ViewBag.Error</div>
                }

                <form method="post" enctype="multipart/form-data" asp-controller="User" asp-action="UpdateProfile" class="settings-form">
                    @Html.AntiForgeryToken()
                    <div class="settings-flex">
                        <div class="avatar-section">
                            <div class="avatar-preview" id="avatar-preview" style="background-image: url('@avatarUrl');"></div>
                            <label for="avatar" class="avatar-upload-btn">Choose Image</label>
                            <input type="file" id="avatar" name="avatar" accept="image/*" class="avatar-input" />
                        </div>
                        <div class="info-section">
                            <div class="form-group">
                                <label>Username</label>
                                <input type="text" value="@(user?.Username ?? "")" disabled />
                            </div>
                            <div class="form-group">
                                <label for="fullname">Full name</label>
                                <input type="text" id="fullname" name="fullname" value="@(user?.FullName ?? "")" />
                            </div>
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" id="email" name="email" value="@(user?.Email ?? "")" />
                            </div>

                            <!-- Gender field: radio styled as pill buttons -->
                            <div class="form-group">
                                <label>Gender</label>
                                <div class="gender-group" role="radiogroup" aria-label="Gender">
                                    <input type="radio" id="gender_male" name="gender" value="Male" @(string.Equals(user?.Gender, "Male", System.StringComparison.OrdinalIgnoreCase) ? "checked" : "") />
                                    <label for="gender_male" class="gender-option">Male</label>

                                    <input type="radio" id="gender_female" name="gender" value="Female" @(string.Equals(user?.Gender, "Female", System.StringComparison.OrdinalIgnoreCase) ? "checked" : "") />
                                    <label for="gender_female" class="gender-option">Female</label>
                                </div>
                            </div>

                            <div class="form-actions">
                                <button type="submit" class="btn-save">Save changes</button>
                                <a class="btn-cancel" href="~/">Cancel</a>
                            </div>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </main>

    <div id="snackbar" class="snackbar" aria-live="polite" aria-atomic="true" style="display:none;">Settings saved!</div>

    <script>
        // Avatar preview
        (function () {
            const input = document.getElementById('avatar');
            const preview = document.getElementById('avatar-preview');

            if (!input || !preview) return;

            input.addEventListener('change', function (e) {
                const file = this.files && this.files[0];
                if (!file) return;
                if (!file.type.startsWith('image/')) return;

                const reader = new FileReader();
                reader.onload = function (ev) {
                    preview.style.backgroundImage = `url('${ev.target.result}')`;
                };
                reader.readAsDataURL(file);
            });
        })();

        // Snackbar for server messages (if server returned a message element)
        (function () {
            const success = @((ViewBag.Message != null) ? "true" : "false").ToString().ToLower();
            const error = @((ViewBag.Error != null) ? "true" : "false").ToString().ToLower();
            const snackbar = document.getElementById('snackbar');

            if (!snackbar) return;

            if (success === 'true') {
                snackbar.textContent = '@(ViewBag.Message ?? "")';
                snackbar.className = 'snackbar show success';
                snackbar.style.display = 'block';
                setTimeout(() => { snackbar.className = 'snackbar'; snackbar.style.display = 'none'; }, 3000);
            }
            else if (error === 'true') {
                snackbar.textContent = '@(ViewBag.Error ?? "")';
                snackbar.className = 'snackbar show error';
                snackbar.style.display = 'block';
                setTimeout(() => { snackbar.className = 'snackbar'; snackbar.style.display = 'none'; }, 4000);
            }
        })();
    </script>
</body>
</html>